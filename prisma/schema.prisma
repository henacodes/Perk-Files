// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id 
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  totalRevenue Decimal @default(0.0)
  currentBalance Decimal @default(0.0)
  sessions      Session[]
  accounts      Account[]
  

  digitalFiles DigitalFile[]
  transactions Transaction[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Transaction {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id]) 
  userId      String 
  amount      Decimal 
  createdAt   DateTime     @default(now()) 
  digitalFiles DigitalFile[] @relation("TransactionDigitalFiles") 
  txRef      String  @unique
  status      String 

  @@map("transaction") 
}




model DigitalFile {
  id          String        @id @default(uuid()) 
  title       String 
  description String 
  fileUrl     String 
  price       Decimal 
  createdAt   DateTime      @default(now()) 
  updatedAt   DateTime      @updatedAt 
  author      User          @relation(fields: [authorId], references: [id]) 
  authorId    String 
  fileSize    Int? 
  category    String 
  transactions Transaction[] @relation("TransactionDigitalFiles") 

  @@map("digital_file") 
}


